/**
 * Convert string to dash case
 *
 * @param {string} str
 * @returns {string}
 */
export function dashCase(str: string) {
  return str.replace(/([A-Z])/g, function ($1) {
    return '-' + $1.toLowerCase();
  });
}

/**
 * Create deep copy of an object
 *
 * @param {Object} obj
 * @returns {Object} deep copy
 */
export function copy(obj) {
  return JSON.parse(JSON.stringify(obj));
}

/**
 * Check if no instruction was matched
 *
 * @param {Object} instruction
 * @returns {boolean}
 */
export function notMatched(instruction) {
  return instruction == null || instruction.length < 1;
}

/**
 * Call function with each key/value pair of an object's properties
 *
 * @param {Object} obj
 * @param {function} fn
 * @returns undefined
 */
export function forEach(obj, fn) {
  Object.keys(obj).forEach(key => fn(obj[key], key));
}

/**
 * Creates a new array with the results of calling a provided function
 * on every key/value pair in the object's properties
 *
 * @param {Object} obj
 * @param {function} fn
 * @returns {Array}
 */
export function mapObj(obj, fn) {
  var result = [];
  Object.keys(obj).forEach(key => result.push(fn(obj[key], key)));
  return result;
}

/**
 * Convert boolean to promise
 *
 * @param value
 * @returns {Object} promise
 */
export function boolToPromise (value) {
  return value ? Promise.resolve(value) : Promise.reject();
}

